% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample_graph.R
\name{sample_graph}
\alias{sample_graph}
\title{Simulate a sampling regime and calculate network modularity.}
\usage{
sample_graph(
  graph,
  sample_nNodes,
  prop_hi_res = 1,
  sampling_duration,
  hi_res = 12,
  lo_res = 26/365,
  regime = "grab-two",
  alg = "fast_greedy"
)
}
\arguments{
\item{graph}{The true network to sample}

\item{sample_nNodes}{the number of individuals to sample}

\item{prop_hi_res}{The proportion of high resolution data to use}

\item{sampling_duration}{The number of days to monitor the nodes}

\item{hi_res}{The observation frequency of the high resolution data, expressed as the number of observations per day.}

\item{lo_res}{The observation frequency of the low resolution data, expressed as the number of observations per day.}

\item{regime}{Whether to sample modules randomly or impose 'evenness'. options include "random", "even", "grab-two"}

\item{alg}{the clustering algorithm to use, one of: "fast_greedy","label_prop", "louvain", "leading_eigen", "optimal",
"walktrap", or "netcarto"}
}
\value{
g_obs, the graph of the observed network
}
\description{
Simulate a sampling regime and calculate network modularity.
}
\examples{
\donttest{
library(igraph)
data("real_networks")
data("study_design")
g_obs <- sample_graph(
  graph = real_networks[[1]],
  sample_nNodes = ceiling(0.5 * length(igraph::V(real_networks[[1]]))),
  prop_hi_res = 1,
  regime = "grab-two",
  alg = "fast_greedy")
am_obs <- igraph::get.adjacency(g_obs, type = "upper", attr = "sim_weight") \%>\%
  as.matrix()
qrel_hat <- assortnet::assortment.discrete(am_obs,
types = igraph::V(g_obs)$membership, weighted = TRUE)$r
study_design[1,] \%>\%
  dplyr::mutate(prop_hi_res = 1,
                nNodes_sim = ncol(am_obs),
                nModules_sim = length(unique(igraph::V(g_obs)$membership)),
                qrel_sim = qrel_hat)
}
}
